---
import { type ProjectSchema } from "src/content/config";
import BaseLayout from "./BaseLayout.astro";
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";

export interface Props extends ProjectSchema {}

const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  badge,
  tags = [],
  repository,
  status,
  technologies = [],
} = Astro.props;
dayjs.extend(localizedFormat);
import { Image } from "astro:assets";

let statusClass = "";
if (status) {
  switch (status) {
    case "active":
      statusClass = "badge badge-info";
      break;
    case "completed":
      statusClass = "badge badge-success";
      break;
    case "archived":
      statusClass = "badge badge-warning";
      break;
    default:
      statusClass = "badge";
  }
}
---

<BaseLayout
  title={title}
  description={description}
  image={heroImage}
  ogType="article"
>
  <main class="md:flex md:justify-center">
    <article class="prose prose-lg max-w-[750px] prose-img:mx-auto">
      {
        heroImage && (
          <Image
            width={750}
            height={422}
            src={heroImage}
            alt={title}
            class="w-full mb-6"
          />
        )
      }

      <div class="flex items-center justify-between mb-4">
        <h1 class="text-4xl font-bold my-auto">{title}</h1>
        {
          repository && (
            <a
              href={repository}
              target="_blank"
              class="btn btn-primary my-auto"
            >
              View Repository
            </a>
          )
        }
      </div>

      {pubDate && <time>{dayjs(pubDate).format("ll")}</time>}
      <br />

      {badge && <div class="badge badge-secondary my-1">{badge}</div>}

      {
        tags &&
          tags.map((tag) => (
            <a
              href={`/projects/tag/${tag}`}
              class="badge badge-outline ml-2 no-underline"
            >
              {tag}
            </a>
          ))
      }
      <br />

      {status && <div class={`${statusClass} my-2`}>Status: {status}</div>}

      {
        technologies.length > 0 && (
          <div class="flex items-center my-2">
            <strong class="mr-2">Technologies:</strong>
            <div class="flex flex-wrap">
              {technologies.map((tech) => (
                <span class="badge badge-outline ml-2">{tech}</span>
              ))}
            </div>
          </div>
        )
      }

      <div class="divider my-2"></div>
      <slot />
      {
        updatedDate && (
          <div class="text-center">
            {" "}
            Last updated on <time>{dayjs(updatedDate).format("ll")}</time>{" "}
          </div>
        )
      }
    </article>
  </main>
</BaseLayout>
